/*
 *  cht_bsw_rt5672.c - ASoc Machine driver for Intel Cherryview-based platforms
 *                     Cherrytrail and Braswell, with RT5672 codec.
 *
 *  Copyright (C) 2014 Intel Corp
 *  Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
 *          Mengdong Lin <mengdong.lin@intel.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; version 2 of the License.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 */

#include <linux/init.h>
#include <linux/module.h>
#include <linux/acpi.h>
#include <linux/platform_device.h>
#include <linux/dmi.h>
#include <linux/slab.h>
//#include <linux/vlv2_plat_clock.h>
#include <sound/pcm.h>
#include <sound/pcm_params.h>
#include <sound/soc.h>
#include <sound/jack.h>
#include "../../codecs/es8316.h"
#include "../atom/sst-atom-controls.h"
#include "../common/sst-acpi.h"

//static struct snd_soc_jack cht_bsw_headset;
#define CHT_CODEC_DAI   "ES8316 HiFi"

struct cht_acpi_card {
        char *codec_id;
        int codec_type;
        struct snd_soc_card *soc_card;
};

struct cht_mc_private {
        struct snd_soc_jack jack;
        struct cht_acpi_card *acpi_card;
};

/* Headset jack detection DAPM pins */
#if 0
static struct snd_soc_jack_pin cht_bsw_headset_pins[] = {
	{
		.pin = "Headset Mic",
		.mask = SND_JACK_MICROPHONE,
	},
	{
		.pin = "Headphone",
		.mask = SND_JACK_HEADPHONE,
	},
};
#endif
static inline struct snd_soc_dai *cht_get_codec_dai(struct snd_soc_card *card)
{
	struct snd_soc_pcm_runtime *rtd;

	list_for_each_entry(rtd, &card->rtd_list, list) {
		if (!strncmp(rtd->codec_dai->name, CHT_CODEC_DAI,
			     strlen(CHT_CODEC_DAI)))
			return rtd->codec_dai;
	}
	return NULL;
}

static int platform_clock_control(struct snd_soc_dapm_widget *w,
		struct snd_kcontrol *k, int  event)
{
	struct snd_soc_dapm_context *dapm = w->dapm;
	struct snd_soc_card *card = dapm->card;
	struct snd_soc_dai *codec_dai;
//	int ret;

	codec_dai = cht_get_codec_dai(card);
	if (!codec_dai) {
		dev_err(card->dev, "Codec dai not found; Unable to set platform clock\n");
		return -EIO;
	}

	if (SND_SOC_DAPM_EVENT_ON(event)) {
		//vlv2_plat_configure_clock(VLV2_PLAT_CLK_AUDIO,
		//		PLAT_CLK_FORCE_ON);
		#if 0
			/* set codec PLL source to the 19.2MHz platform clock (MCLK) */
			ret = snd_soc_dai_set_pll(codec_dai, 0, RT5670_PLL1_S_MCLK,
					CHT_PLAT_CLK_3_HZ, 48000 * 512);
			if (ret < 0) {
				dev_err(card->dev, "can't set codec pll: %d\n", ret);
				return ret;
			}

			/* set codec sysclk source to PLL */
			ret = snd_soc_dai_set_sysclk(codec_dai, RT5670_SCLK_S_PLL1,
				48000 * 512, SND_SOC_CLOCK_IN);
			if (ret < 0) {
				dev_err(card->dev, "can't set codec sysclk: %d\n", ret);
				return ret;
			}
		#endif
	} else {
		/* Set codec sysclk source to its internal clock because codec
		 * PLL will be off when idle and MCLK will also be off by ACPI
		 * when codec is runtime suspended. Codec needs clock for jack
		 * detection and button press.
		 */
		//vlv2_plat_configure_clock(VLV2_PLAT_CLK_AUDIO,
		//		PLAT_CLK_FORCE_ON);
	 	#if 0
			snd_soc_dai_set_sysclk(codec_dai, RT5670_SCLK_S_RCCLK,
				       	48000 * 512, SND_SOC_CLOCK_IN);
		#endif
	}
	return 0;
}

static const struct snd_soc_dapm_widget cht_dapm_widgets[] = {
	SND_SOC_DAPM_HP("Headphone", NULL),
	SND_SOC_DAPM_MIC("Headset Mic", NULL),
	SND_SOC_DAPM_MIC("Internal Mic", NULL),
	SND_SOC_DAPM_SPK("Ext Spk", NULL),
	SND_SOC_DAPM_SUPPLY("Platform Clock", SND_SOC_NOPM, 0, 0,
			platform_clock_control, SND_SOC_DAPM_PRE_PMU |
			SND_SOC_DAPM_POST_PMD),
};

static const struct snd_soc_dapm_route cht_audio_map[] = {
	{"MIC1", NULL, "Headset Mic"},
	{"MIC2", NULL, "Internal Mic"},

	{"Headphone", NULL, "HPOL"},
	{"Headphone", NULL, "HPOR"},
	{"Ext Spk", NULL, "HPOL"},
	{"Ext Spk", NULL, "HPOR"},

	{"Playback", NULL, "ssp2 Tx"},
	{"ssp2 Tx", NULL, "codec_out0"},
	{"ssp2 Tx", NULL, "codec_out1"},
	{"codec_in0", NULL, "ssp2 Rx"},
	{"codec_in1", NULL, "ssp2 Rx"},
	{"ssp2 Rx", NULL, "Capture"},
	{"Playback", NULL, "Platform Clock"},
	{"Capture", NULL, "Platform Clock"},	
	{"Headphone", NULL, "Platform Clock"},
	{"Headset Mic", NULL, "Platform Clock"},
	{"Internal Mic", NULL, "Platform Clock"},
	{"Ext Spk", NULL, "Platform Clock"},
};

static const struct snd_kcontrol_new cht_mc_controls[] = {
	SOC_DAPM_PIN_SWITCH("Headphone"),
	SOC_DAPM_PIN_SWITCH("Headset Mic"),
	SOC_DAPM_PIN_SWITCH("Internal Mic"),
	SOC_DAPM_PIN_SWITCH("Ext Spk"),
};

static int cht_aif1_hw_params(struct snd_pcm_substream *substream,
					struct snd_pcm_hw_params *params)
{
	struct snd_soc_pcm_runtime *rtd = substream->private_data;
	struct snd_soc_dai *codec_dai = rtd->codec_dai;
	unsigned int fmt;
	int ret;

	pr_debug("Enter:%s", __func__);
	
	//add for voip call no sound by zm 1211
	if (strncmp(codec_dai->name, "ES8316 HiFi", 11))
                return 0;
	
	snd_soc_dai_set_bclk_ratio(codec_dai, 50);
	/* I2S Slave Mode*/
	fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
			SND_SOC_DAIFMT_CBS_CFS;

	/* Set codec DAI configuration */
	ret = snd_soc_dai_set_fmt(codec_dai, fmt);
	if (ret < 0) {
		pr_err("can't set codec DAI configuration %d\n", ret);
		return ret;
	}
	                
  #if 0              
		/* set codec PLL source to the 19.2MHz platform clock (MCLK) */
		ret = snd_soc_dai_set_pll(codec_dai, 0, RT5670_PLL1_S_MCLK,
					  CHT_PLAT_CLK_3_HZ, params_rate(params) * 512);
		if (ret < 0) {
			dev_err(rtd->dev, "can't set codec pll: %d\n", ret);
			return ret;
		}
	#endif
	/* set codec sysclk source to PLL */
	ret = snd_soc_dai_set_sysclk(codec_dai, 0,
			params_rate(params) * 512, SND_SOC_CLOCK_IN);
	if (ret < 0) {
		pr_err("can't set codec sysclk: %d\n", ret);
		return ret;
	}
	
	return 0;
}

static int cht_es8316_init(struct snd_soc_pcm_runtime *runtime)
{
	int ret;
	struct snd_soc_codec *codec = runtime->codec;
	struct snd_soc_card *card = runtime->card;
	const struct snd_soc_dapm_route *custom_map;
	int num_routes;

	card->dapm.idle_bias_off = true;
	/*
	rt5640_sel_asrc_clk_src(codec,
				RT5640_DA_STEREO_FILTER |
				RT5640_AD_STEREO_FILTER,
				RT5640_CLK_SEL_ASRC);
	*/
	ret = snd_soc_add_card_controls(card, cht_mc_controls,
					ARRAY_SIZE(cht_mc_controls));
	if (ret) {
		dev_err(card->dev, "unable to add card controls\n");
		return ret;
	}
/*
	dmi_check_system(byt_rt5640_quirk_table);
	switch (BYT_RT5640_MAP(byt_rt5640_quirk)) {
	case BYT_RT5640_IN1_MAP:
		custom_map = byt_rt5640_intmic_in1_map;
		num_routes = ARRAY_SIZE(byt_rt5640_intmic_in1_map);
		break;
	case BYT_RT5640_DMIC2_MAP:
		custom_map = byt_rt5640_intmic_dmic2_map;
		num_routes = ARRAY_SIZE(byt_rt5640_intmic_dmic2_map);
		break;
	default:
		custom_map = byt_rt5640_intmic_dmic1_map;
		num_routes = ARRAY_SIZE(byt_rt5640_intmic_dmic1_map);
	}

	ret = snd_soc_dapm_add_routes(&card->dapm, custom_map, num_routes);
	if (ret)
		return ret;

	if (byt_rt5640_quirk & BYT_RT5640_DMIC_EN) {
		ret = rt5640_dmic_enable(codec, 0, 0);
		if (ret)
			return ret;
	}
*/
	snd_soc_dapm_ignore_suspend(&card->dapm, "Headphone");
	snd_soc_dapm_ignore_suspend(&card->dapm, "Speaker");

	return ret;
}



static const struct snd_soc_pcm_stream cht_es8316_dai_params = {
	.formats = SNDRV_PCM_FMTBIT_S24_LE,
	.rate_min = 48000,
	.rate_max = 48000,
	.channels_min = 2,
	.channels_max = 2,
};
static int cht_codec_fixup(struct snd_soc_pcm_runtime *rtd,
			    struct snd_pcm_hw_params *params)
{
	struct snd_interval *rate = hw_param_interval(params,
			SNDRV_PCM_HW_PARAM_RATE);
	struct snd_interval *channels = hw_param_interval(params,
						SNDRV_PCM_HW_PARAM_CHANNELS);
	int ret;

	/* The DSP will covert the FE rate to 48k, stereo, 24bits */
	rate->min = rate->max = 48000;
	channels->min = channels->max = 2;

	/* set SSP2 to 24-bit */
	params_set_format(params, SNDRV_PCM_FORMAT_S24_LE);
	/*
	 * Default mode for SSP configuration is TDM 4 slot, override config
	 * with explicit setting to I2S 2ch 24-bit. The word length is set with
	 * dai_set_tdm_slot() since there is no other API exposed
	 */
	ret = snd_soc_dai_set_fmt(rtd->cpu_dai,
				  SND_SOC_DAIFMT_I2S     |
				  SND_SOC_DAIFMT_NB_IF   |
				  SND_SOC_DAIFMT_CBS_CFS
				  );
	if (ret < 0) {
		dev_err(rtd->dev, "can't set format to I2S, err %d\n", ret);
		return ret;
	}

	ret = snd_soc_dai_set_tdm_slot(rtd->cpu_dai, 0x3, 0x3, 2, 24);
	if (ret < 0) {
		dev_err(rtd->dev, "can't set I2S config, err %d\n", ret);
		return ret;
	}
	return 0;
}

static int cht_aif1_startup(struct snd_pcm_substream *substream)
{
	return snd_pcm_hw_constraint_single(substream->runtime,
			SNDRV_PCM_HW_PARAM_RATE, 48000);
}

static struct snd_soc_ops cht_aif1_ops = {
	.startup = cht_aif1_startup,
};

static struct snd_soc_ops cht_be_ssp2_ops = {
	.hw_params = cht_aif1_hw_params,
};

static struct snd_soc_dai_link cht_dailink[] = {
	/* Front End DAI links */
	[MERR_DPCM_AUDIO] = {
		.name = "Audio Port",
		.stream_name = "Audio",
		.cpu_dai_name = "media-cpu-dai",
		.codec_dai_name = "snd-soc-dummy-dai",
		.codec_name = "snd-soc-dummy",
		.platform_name = "sst-mfld-platform",
		.ignore_suspend = 1,
		.dynamic = 1,
		.dpcm_playback = 1,
		.dpcm_capture = 1,
		.ops = &cht_aif1_ops,
	},
	[MERR_DPCM_DEEP_BUFFER] = {
		.name = "Deep-Buffer Audio Port",
		.stream_name = "Deep-Buffer Audio",
		.cpu_dai_name = "deepbuffer-cpu-dai",
		.codec_dai_name = "snd-soc-dummy-dai",
		.codec_name = "snd-soc-dummy",
		.platform_name = "sst-mfld-platform",
		.ignore_suspend = 1,
		.nonatomic = true,
		.dynamic = 1,
		.dpcm_playback = 1,
		.ops = &cht_aif1_ops,
	},
	[MERR_DPCM_COMPR] = {
		.name = "Compressed Port",
		.stream_name = "Compress",
		.cpu_dai_name = "compress-cpu-dai",
		.codec_dai_name = "snd-soc-dummy-dai",
		.codec_name = "snd-soc-dummy",
		.platform_name = "sst-mfld-platform",
	},

	/* Back End DAI links */
	{
		/* SSP2 - Codec */
		.name = "SSP2-Codec",
		.be_id = 1,
		.cpu_dai_name = "ssp2-port",
		.platform_name = "sst-mfld-platform",
		.no_pcm = 1,
		.codec_dai_name = "ES8316 HiFi",
		//.codec_name = "es8316.1-0011",
		//.codec_name = "i2c-ESSX8316:00",
		.codec_name = "i2c-ESSX8316:00",
		.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF
						| SND_SOC_DAIFMT_CBS_CFS,
		//.init = cht_codec_init,
		.be_hw_params_fixup = cht_codec_fixup,
		.dpcm_playback = 1,
		.dpcm_capture = 1,
		.init = cht_es8316_init,
		.ops = &cht_be_ssp2_ops,
	},
};
#if 1 
static int cht_suspend_pre(struct snd_soc_card *card)
{
	struct snd_soc_codec *codec;

	list_for_each_entry(codec, &card->codec_dev_list, card_list) {
		if (!strcmp(codec->component.name, "i2c-ESSX8316:00")) {
			dev_dbg(codec->dev, "disabling jack detect before going to suspend.\n");
			#if 0
			rt5670_jack_suspend(codec);
			#endif
			break;
		}
	}
	return 0;
}

static int cht_resume_post(struct snd_soc_card *card)
{
	struct snd_soc_codec *codec;

	list_for_each_entry(codec, &card->codec_dev_list, card_list) {
		if (!strcmp(codec->component.name, "i2c-ESSX8316:00")) {
			dev_dbg(codec->dev, "enabling jack detect for resume.\n");
			#if 0
			rt5670_jack_resume(codec);
			#endif
			break;
		}
	}

	return 0;
}
#endif
/* SoC card */
static struct snd_soc_card snd_soc_card_cht8316 = {
	.name = "cherrytrailcraudio",
	.owner = THIS_MODULE,
	.dai_link = cht_dailink,
	.num_links = ARRAY_SIZE(cht_dailink),
	.dapm_widgets = cht_dapm_widgets,
	.num_dapm_widgets = ARRAY_SIZE(cht_dapm_widgets),
	.dapm_routes = cht_audio_map,
	.num_dapm_routes = ARRAY_SIZE(cht_audio_map),
	.fully_routed = true,
};

static struct cht_acpi_card snd_soc_cards[] = {
	{"ESSX8316", 0, &snd_soc_card_cht8316},

};
static char cht_es8316_codec_name[16]; /* i2c-<HID>:00 with HID being 8 chars */

static acpi_status snd_acpi_codec_match(acpi_handle handle, u32 level,
				       void *context, void **ret)
{
	*(bool *)context = true;
	return AE_OK;
}
static int snd_cht_mc_probe(struct platform_device *pdev)
{
	int ret_val = 0;
	struct sst_acpi_mach *mach;
	struct cht_mc_private *drv;
	printk("enter into %s!!!!!!", __func__);
	/* register the soc card */
	snd_soc_card_cht8316.dev = &pdev->dev;
//	mach = snd_soc_card_cht8316.dev->platform_data;

	/* fixup codec name based on HID */
//	snprintf(cht_es8316_codec_name, sizeof(cht_es8316_codec_name),
//		 "%s%s%s", "i2c-", mach->id, ":00");
//	printk("----%s----%s", __func_, mach->id);
//	cht_dailink[MERR_DPCM_COMPR+1].codec_name = cht_es8316_codec_name;
	drv = devm_kzalloc(&pdev->dev, sizeof(*drv), GFP_ATOMIC);
	if(!drv) {
		printk("--------%s---------allocation failed\n", __func__);
        	return -ENOMEM;
	}
	snd_soc_card_set_drvdata(&snd_soc_card_cht8316, drv);
	ret_val = devm_snd_soc_register_card(&pdev->dev, &snd_soc_card_cht8316);
	
	if (ret_val) {
		dev_err(&pdev->dev,
			"snd_soc_register_card failed %d\n", ret_val);
		return ret_val;
	}
	platform_set_drvdata(pdev, &snd_soc_card_cht8316);
	return ret_val;
}

static struct platform_driver snd_cht_mc_driver = {
	.driver = {
		.name = "cht-bsw-rt5645",
		.pm = &snd_soc_pm_ops,
	},
	.probe = snd_cht_mc_probe,
};

module_platform_driver(snd_cht_mc_driver);
#if 0
static int __init snd_cht_driver_init(void)
{
        int ret;
	printk("Enter into %s!!!!!!\n", __func__);
        ret = platform_driver_register(&snd_cht_mc_driver);
        if (ret)
                printk("Fail to register Cherrytrail Machine driver cht_es8316\n");
        else
                printk("Cherrytrail Machine Driver cht_es8316 registerd\n");
        return ret;
}
late_initcall(snd_cht_driver_init);

static void __exit snd_cht_driver_exit(void)
{
        pr_debug("In %s\n", __func__);
        platform_driver_unregister(&snd_cht_mc_driver);
}
module_exit(snd_cht_driver_exit);
#endif



MODULE_DESCRIPTION("ASoC Intel(R) Baytrail CR Machine driver");
MODULE_AUTHOR("Subhransu S. Prusty, Mengdong Lin");
MODULE_LICENSE("GPL v2");
MODULE_ALIAS("platform:cht-bsw-rt5645");
